{
    "contents" : "\\chapter{Multiple Minima in  Multidimensional Scaling }\n\\label{sec:MultMinima}\n\\chaptermark{Multiple Minima in  Multidimensional Scaling}\n\n\nThe approximate values of the dissimilarity matrix is shown in \\autoref{table:diss_mat}.\n\n\\begin{table}[ht]\n\\centering\n\\ttfamily\n\\begin{tabular}{r|rrrrrrr}\n  \\hline\n & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\\\ \n  \\hline\n  1 & 0.00 & 1.00 & 1.41 & 1.00 & 0.71 &1.00 & 1.00  \\\\ \n  2 & 1.00 & 0.00 & 1.00 & 1.41 & 0.71 & 0.00 & 0.01 \\\\ \n  3 & 1.41 & 1.00 & 0.00 & 1.00 & 0.71 & 1.00 & 1.00  \\\\ \n  4 & 1.00 & 1.41 & 1.00 & 0.00 & 0.71 & 0.01 & 0.00  \\\\ \n  5 & 0.71 & 0.71 & 0.71 & 0.71 & 0.00 & 0.71 & 0.71   \\\\ \n  6 & 1.00 & 0.00 & 1.00 & 0.01 & 0.71 & 0.00 & 1.41  \\\\ \n  7 & 1.00 & 0.01 & 1.00 & 0.00 & 0.71 & 1.41 & 0.00  \\\\ \n  \n   \\hline\n\\end{tabular}\n\n\\caption{The entries of the dissimilarity matrix (rounded to two decimal digits)\\label{table:diss_mat}}\n\\end{table}\n\n\n\n<<multMinMDS,eval=FALSE,results='hide',tidy=FALSE,echo=FALSE,error=TRUE,cache=TRUE>>=\nverbose=TRUE\nroot.dir<-Sys.getenv(\"PROJECT_DIR\")\nsetwd(root.dir)\nsource(\"./JOFC_MatchDetect/lib/smacofM.R\")\nsource(\"./JOFC_MatchDetect/lib/oosIM.R\")\nsource(\"./JOFC_MatchDetect/lib/multipleMinimaTest_fn.R\")\n\n\n\n#\n# Create point configuration\n#\n\nlibrary(ggplot2)\nn<-7\nX<-matrix(0,n,2)\nX[,1]<-c(0,1,1,0,0,0,0.5)#1.01)\nX[,2]<-c(0,0,1,1,0,0,0.5)#,0)\nX[5,]<-c(1,0)\nX[6,]<-c(0,1)\n#X[8,]<-c(0,1.0)\nin.sample.ind<-c(1:4,7)#,8)\nd.X<- dist(X)\n\nepsilon <-1E-3\nw <- 0.99\n\n#\n# Perturb Dissimilarity matrix\n#\ni <- 4\nj <- 5\n\nind <- (n*(i-1) - i*(i-1)/2 + j-i)\n\nd.X[ind]<-d.X[ind]-1.4\n\ni<-2\nj<-6\nind<-(n*(i-1) - i*(i-1)/2 + j-i)\n\nd.X[ind]<- d.X[ind]-1.4\n#X[5,]<-c(0,1)\n\n\ni<-5\nj<-7\nind<-(n*(i-1) - i*(i-1)/2 + j-i)\n\n#d.X[ind]<- d.X[ind]+0.707\n\ni<-5\nj<-8\nind<-(n*(i-1) - i*(i-1)/2 + j-i)\n\n#d.X[ind]<- d.X[ind]-1.4\n\nif (verbose) print(d.X)\n\ninit.config<-X\n\nw.vals<-c(0.1,seq(0.2,0.4,0.1),seq(0.41,0.54,0.01),seq(0.55,0.7,0.05),seq(0.75,0.85,0.01),seq(0.90,0.95,0.05),0.99)\nw.vals.sp<-w.vals[c(1,13,14,15,21,26:31,35,36)]\ngrid.seq.x<-seq(-0.5,1.5,0.1)\ngrid.seq.y<-seq(-0.2,1.6,0.1)\n\nx.grid.len <- length(grid.seq.x)\ny.grid.len <- length(grid.seq.y)\ngrid.pts.count<- x.grid.len *y.grid.len \n\n#\n# Define empty arrays for results\n#\nfinal.close.to.init.w<-rep(0, length(w.vals))\n\ndir.deriv<-array(0,dim=c(length(w.vals),x.grid.len,length(grid.seq.y),2*n))\nhessian.at.pt<-array(list(c(1,1,2,1)),dim=c(length(w.vals),x.grid.len,y.grid.len))\nsign.hessian.at.pt<-array(0,dim=c(length(w.vals),x.grid.len,y.grid.len))\nstress.at.loc.w <-sign.hessian.at.pt \n\nmin.config.stress.1.w<- rep(0, length(w.vals))\nmin.config.stress.2.w<- rep(0, length(w.vals))\n\n\nclose.to.init.X5.for.w <- list()\nclose.to.init.X6.for.w <- list()\nfar.to.init.X5.for.w   <- list()\nfar.to.init.X6.for.w   <- list()\n\n\n\nfinal.coords.x.5.w<-array(0,dim=c(length(w.vals),x.grid.len,y.grid.len))\nfinal.coords.y.5.w<-array(0,dim=c(length(w.vals),x.grid.len,y.grid.len))\nfinal.coords.x.6.w<-array(0,dim=c(length(w.vals),x.grid.len,y.grid.len))\nfinal.coords.y.6.w<-array(0,dim=c(length(w.vals),x.grid.len,y.grid.len))\nconfig.points.agg<-data.frame(x=numeric(0),y=numeric(0),pt.name=character(0),w=numeric(0))\n\n\nfor (w.i in 1:length(w.vals)){\n  \n  stress.at.loc<-array(0,dim=c(x.grid.len,y.grid.len))\n  \n  #Set up weight vector\n  w <- w.vals[w.i]\n  W <- matrix(1-w,n,n)\n  W[5,2] <- W[2,5]<- w\n  W[6,4] <- W[4,6]<- w\n  W[5,7] <- W[7,5]<- 1-w\n  diag(W)<-0\n  \n  \n  W.oos <- W\n  W.oos[in.sample.ind, in.sample.ind]<-0  \n  new.index.order<- c(in.sample.ind,c(5,6))\n  W.oos<-W.oos[new.index.order,new.index.order]\n  \n  \n  \n  in.sample.Bool<-(1:n %in% in.sample.ind)\n  X.embed.1.in <- smacofM(as.matrix(d.X)[in.sample.ind,in.sample.ind],\n                          ndim    = 2,\n                          W       = W[in.sample.ind,in.sample.ind],\n                          init    = init.config[in.sample.Bool,]  \t,\n                          verbose = FALSE,\n                          itmax   = 1000,\n                          eps     = 1e-6)\n  \n  X.embed.1.oos <- oosIM(D=as.matrix(d.X),\n                         X=X.embed.1.in,\n                         init= init.config[!in.sample.Bool,],\n                         W=W.oos,\n                         verbose = FALSE,\n                         itmax   = 1000,\n                         eps     = 1e-6,\n                         bwOos = TRUE,\n                         isWithin = ifelse(in.sample.Bool,1,0) )\n  \n  row.names(X.embed.1.oos)<-NULL\n  row.names(X.embed.1.in)<-NULL\n  X.embed.1.norm <- rbind(X.embed.1.in[1:4,] ,X.embed.1.oos,X.embed.1.in[5:(n-2),]) \n  if (verbose) print(\"Init config \")\n  if (verbose) print(X.embed.1.norm)\n  stress <- raw.stress.at(X.embed.1.norm)\n  if (verbose) print(\"Init config  stress\")\n  if (verbose)  print(stress)\n  close.to.init.1<-data.frame(x=numeric(),y=numeric())\n  close.to.init.2<-data.frame(x=numeric(),y=numeric())\n  far.to.init.1<-data.frame(x=numeric(),y=numeric())\n  far.to.init.2<-data.frame(x=numeric(),y=numeric())\n  min.stress.1<-100\n  min.stress.2<-100\n  \n  \n  \n  grid.resp<-array(0,dim=c(x.grid.len,y.grid.len))\n  grid.coords<-array(0,dim=c(x.grid.len,y.grid.len))\n  \n  \n  mesh.grid.coords<-meshgrid(grid.seq.x,grid.seq.y)\n  \n  \n  final.coords.x.5<-array(0,dim=c(x.grid.len,y.grid.len))\n  final.coords.y.5<-array(0,dim=c(x.grid.len,y.grid.len))\n  final.coords.x.6<-array(0,dim=c(x.grid.len,y.grid.len))\n  final.coords.y.6<-array(0,dim=c(x.grid.len,y.grid.len))\n  min.config.1<-matrix(0,n,2)\n  min.config.2<-matrix(0,n,2)\n  \n  for (j in 1:y.grid.len){\n    \n    for (i in 1:x.grid.len){\n      init.config <- X\n      \n      i.x<-grid.seq.x[i]\n      j.y<-grid.seq.y[j]\n      #i.x<-mesh.grid.coords$x[i,j] \n      #j.y<-mesh.grid.coords$y[i,j] \n      \n      init.config[5,]<-c(i.x,j.y)\n      init.config[6,]<-c(1-i.x,1-j.y)\n      \n      X.embed.2.in<-smacofM(as.matrix(d.X)[in.sample.ind, in.sample.ind],\n                            ndim    = 2,\n                            W       = W[in.sample.ind,in.sample.ind],\n                            init    = init.config[in.sample.Bool,],\n                            verbose = FALSE,\n                            itmax   = 1000,\n                            eps     = 1e-6)\n      \n      X.embed.2.oos<-oosIM(D = as.matrix(d.X),\n                           X = X.embed.2.in,\n                           init = init.config[!in.sample.Bool,],\n                           \n                           verbose =  FALSE,#(i<=(x.grid.len/2)),\n                           itmax   = 1000,\n                           eps     = 1e-6,\n                           W = W.oos,\n                           bwOos = TRUE,\n                           isWithin = ifelse(in.sample.Bool,1,0))\n      \n      \n      \n      \n      row.names(X.embed.2.oos)<-NULL\n      row.names(X.embed.2.in)<-NULL\n      \n      X.embed.2.norm<- rbind(X.embed.2.in[1:4,] ,X.embed.2.oos,X.embed.2.in[5:(n-2),])\t\t\n      \n      hess.mat<- hessian.mat(X.embed.2.norm,n)\n      hess.mat[hess.mat==0]<-t(hess.mat)[hess.mat==0]\n      \n      hessian.at.pt[[w.i,i,j]]<- as.list(hess.mat)\n      \n      hess.mat<-hess.mat[9:12,9:12]\n      hess.eig<- eigen(hess.mat,symmetric=TRUE,only.values=TRUE)\n      e.vals<- hess.eig$values\n      low.than.thres<- abs(e.vals)<1E-5\n      e.vals[low.than.thres] <-  0 #sign(e.vals[low.than.thres])*1E-5 \n      \n      if (sum(e.vals<0)==0){\n        if (sum((e.vals==0)>0)){\n          sign.hessian.at.pt[w.i,i,j] <- 2\n        } else{\n          sign.hessian.at.pt[w.i,i,j] <- 1 #pos definite\n        }\n      } else if (sum(e.vals>0)==0) {\n        if  (sum((e.vals==0)>0)){\n          sign.hessian.at.pt[w.i,i,j] <- -2 #neg definite\n        } else{\n          sign.hessian.at.pt[w.i,i,j] <- -1 #neg definite\n          \n        }\n        \n      } else{\n        sign.hessian.at.pt[w.i,i,j] <- 0  #neither pos nor neg definite  saddle point\n      }\n      final.coords.x.5[i,j]<-X.embed.2.norm[5,1]\n      final.coords.y.5[i,j]<-X.embed.2.norm[5,2]\n      final.coords.x.6[i,j]<-X.embed.2.norm[6,1]\n      final.coords.y.6[i,j]<-X.embed.2.norm[6,2]\n      #print(\"X.embed.2.norm\")\n      #print(X.embed.2.norm)\n      stress <- sum(as.dist(W)*((dist(X.embed.2.norm)-d.X)^2))\n      stress.unif.wt <- sum(((dist(X.embed.2.norm)-d.X)^2))\n      stress.unif.abs <- sum(abs(dist(X.embed.2.norm)-d.X))\n      #print(stress)\n      #\tprint(stress.unif.wt)\n      #\tprint(stress.unif.abs)\t\t\n      if (((X.embed.2.norm[6,2]>0.5)) & \n            (((X.embed.2.norm[5,1]>X.embed.2.norm[6,1])))) { \n        #& (sum(X.embed.2.norm[6,]<0.3)==1))\n        \n        \n        grid.resp[i,j]<-1\n        #\tprint(\"First Test Point\")\n        #\tprint(X.embed.2.norm[5,])\n        if (stress < min.stress.1) {\n          min.stress.1<-stress\n          if (verbose)\tprint(\"Min stress found(real min)\")\n          if (verbose) print(X.embed.2.norm)\n          min.config.1<-X.embed.2.norm\n          if (verbose) print(min.stress.1)\n          \n        }\n        close.to.init.1<-rbind(close.to.init.1,X.embed.2.norm[5,])\n        close.to.init.2<-rbind(close.to.init.2,X.embed.2.norm[6,])\n        \n        \n      } else{\n        grid.resp[i,j]<-0\n        #print(\"First Test Point\")\n        if (verbose) print(X.embed.2.norm[5,])\t\t\n        if (stress < min.stress.2){\n          min.stress.2<-stress\n          if (verbose) print(\"Min stress found(second min)\")\n          if (verbose) print(X.embed.2.norm)\n          if (verbose) \tprint(min.stress.2)\n          min.config.2<-X.embed.2.norm\n          \n        }\n        far.to.init.1<-rbind(far.to.init.1,X.embed.2.norm[5,])\n        far.to.init.2<-rbind(far.to.init.2,X.embed.2.norm[6,])\n        \n        #} else{\n        #\tgrid.resp[i,j] <- NA\n      }\n      \n      if (w.i>9) {\n        print(\"stress\")\n        print(stress)\n        print(as.dist(W))\n      }\n      stress.at.loc[i,j]<- stress\n      \n      \n      \n      \n    }\n    \n  }\n  \n  stress.at.loc.w[w.i,,] <-stress.at.loc\n  final.coords.x.5.w[w.i,,]=final.coords.x.5\n  final.coords.x.6.w[w.i,,]=final.coords.x.6\n  final.coords.y.5.w[w.i,,]=final.coords.y.5\n  final.coords.y.6.w[w.i,,]=final.coords.y.6\n  \n  #plot(x=grid.seq.x,y=grid.seq.y, col=grid.resp)\n  #x.coords = [x1 x2 x3 x4 ... x1 x2 x3 x4 ...\n  x.coords <- rep(grid.seq.x,y.grid.len)\n  #y.coords = [y1 y1 y1 y1 ... y2 y2 y2 y2 ...\n  y.coords <- rep(grid.seq.y,each=x.grid.len)\n  #grid.resp<-grid.resp[x.grid.lenA:1,]\n  \n#  if (w %in% w.vals.sp){\n    #if (run.in.linux) {X11()} else {windows()}\n#    plot(x.coords, y.coords,\n         #plot(unmatrix(mesh.grid.coords$x,byrow=FALSE),\n         #     unmatrix(mesh.grid.coords$y,byrow=FALSE),\n#         col=ifelse(unmatrix(grid.resp,byrow=FALSE)==1,\"red\",\"black\"))\n#  }\n  print(\"For w.value\")\n  print(w)\n  print(\"Min stress found(real min)\")\n  if (verbose) print(min.config.1)\n  print(min.stress.1)\n  print(\"Min stress found(second min)\")\n  if (verbose) print(min.config.2)\n  print(min.stress.2)\n  min.config.stress.1.w[w.i]<-min.stress.1\n  min.config.stress.2.w[w.i]<-min.stress.2\n  \n  \n#   if (!is.vector(close.to.init.1)){\n#     config.points <- cbind(close.to.init.1,rep(\"X_6\",grid.pts.count))\n#     config.points <- rbind(config.points,cbind(close.to.init.2,rep(\"X_7\",grid.pts.count)) )\n#     config.points<- data.frame(x= config.points[,1],y=config.points[,2],pt.name=config.points[,3],w=w.vals[w.i])\n#     config.points.agg <- rbind(config.points.agg,config.points)\n#   }\n#   \n  \n#   if (!is.vector(far.to.init.1)){\n#     config.points <- cbind(far.to.init.1,rep(\"X_6\",grid.pts.count))\n#     config.points <- rbind(config.points,cbind(far.to.init.2,rep(\"X_7\",grid.pts.count)) )\n#     config.points<- data.frame(x= config.points[,1],y=config.points[,2],pt.name=config.points[,3],w=w.vals[w.i])\n#     config.points.agg <- rbind(config.points.agg,config.points)\n#   }\n\n  print(\"Number of final config close to initial config\")\n  print(dim(close.to.init.1)[1])\n  final.close.to.init.w[w.i] <- dim(close.to.init.1)[1]\n  \n  print(\"Number of final config far to initial config\")\n  print(dim(far.to.init.1)[1])\n  min.config.stress.1.w[w.i]<- min.stress.1\n  min.config.stress.2.w[w.i]<- min.stress.2\n  \n  if (plot.in.3d){\n    \n    #if (!w%in%w.vals.sp) rgl.close()\n    \n  }\n  \n  if (nrow(far.to.init.1)==0) { far.to.init.1<-NULL}\n  if (nrow(far.to.init.2)==0) { far.to.init.2<-NULL}\n  if (nrow(close.to.init.1)==0) { close.to.init.1<-NULL}\n  if (nrow(close.to.init.2)==0) { close.to.init.2<-NULL}\n  \n  far.to.init.X5.for.w<- c(far.to.init.X5.for.w, list(far.to.init.1)) \n  far.to.init.X6.for.w<- c(far.to.init.X6.for.w, list(far.to.init.2))\n  close.to.init.X5.for.w <- c(close.to.init.X5.for.w, list(close.to.init.1))\n  close.to.init.X6.for.w <- c(close.to.init.X6.for.w, list(close.to.init.2)) \n  print(\"length(far.to.init.X5.for.w)\")\n  print(length(far.to.init.X5.for.w))  \n\n\n}\n@\n\n\n<<plot_final_pts_all_w, eval=FALSE, fig.show='asis',results='hide',echo=FALSE,fig.cap=\"Embedded Point Pairs ($\\\\hat{X}_6$ and $\\\\hat{X}_7$) for all initial configurations for different $w$ values\">>=\nlibrary(ggplot2)\n \n  all.final.pts.lf <- data.frame(x=numeric(0),y=numeric(0),pt.name=character(0),close.or.far=character(0),w=numeric(0))\n  \n  far.to.init.X5.for.w.array <- array(numeric(0),dim=c(0,3))\n  pt.name.var <- c(\"X_6\",\"X_7\",\"X_6\",\"X_7\")\n  close.or.far.var = c(\"far\",\"far\",\"close\",\"close\")\n  data.list<-list(far.to.init.X5.for.w  ,far.to.init.X6.for.w,\n                  close.to.init.X5.for.w,close.to.init.X6.for.w)\n  \n  for (j in 1:4){\n  pt.coords<- data.list[[j]]\n  pt.name.var.j <- pt.name.var[j]\n  close.or.far.var.j <-close.or.far.var[j]\n  for (w.i in 1:length(w.vals)){\n    final.coords <- pt.coords[[w.i]]\n    \n   \n    if (!is.null(final.coords)){\n      colnames(final.coords)<-c(\"x\",\"y\")\n      num.pts<-nrow(final.coords)\n      new.final.pts.lf <- cbind(final.coords,pt.name=rep(pt.name.var.j,num.pts)\n            ,close.or.far=rep(close.or.far.var.j,num.pts),w=rep(w.vals[w.i],num.pts))\n      all.final.pts.lf <- rbind(all.final.pts.lf ,new.final.pts.lf)\n      \n    }\n  }\n  }\n  \n  \nsub.final.pts.lf.logical<-all.final.pts.lf$w %in% c(0.1,0.5,0.51,0.52,0.8,0.81,0.82,0.84)\nsub.final.pts.lf<- all.final.pts.lf[sub.final.pts.lf.logical,]\n\nall.final.pts.lf$w<- as.factor(all.final.pts.lf$w)\nsub.final.pts.lf$w<- as.factor(sub.final.pts.lf$w)\n\nlevels(sub.final.pts.lf$w)<- paste(\"w = \",levels(sub.final.pts.lf$w))\ng1<-ggplot(sub.final.pts.lf,aes(x=x,y=y,colour=pt.name))+geom_point(alpha = 1/5) +scale_shape(solid = FALSE) + facet_wrap(~w,ncol=2)\nprint(g1)\n@\n\n\n<<config_w_ani,eval=FALSE, fig.show='hide',echo=FALSE,out.width='6in',fig.cap=\"Embedded Point Pairs ($\\\\hat{X}_6$ and $\\\\hat{X}_7$) for all initial configurations for different $w$ values\">>=\nfor (w.it in w.vals){\nsub.final.pts.lf.logical<-all.final.pts.lf$w %in% w.it\nsub.final.pts.lf<- all.final.pts.lf[sub.final.pts.lf.logical,]\nlevels(sub.final.pts.lf$w)<- paste(\"w=\",levels(sub.final.pts.lf$w))\n\ng1<-ggplot(sub.final.pts.lf,aes(x=x,y=y,colour=pt.name))+geom_point(alpha = 1/5)+ \nscale_shape(solid = FALSE) + xlim(-0.1, 1.1)+ylim(-0.1, 1.1) + labs(title=paste(\"w=\", format(w.it,digits=2),collapse = \"\")) +\n  theme(legend.position=\"bottom\")\n\nprint(g1)\n}\n@\n\n\n\n\n\n<<more_2d_3d_plots,eval=FALSE,results='hide',echo=FALSE>>=\n\n\nfor (w.i in 1:length(w.vals)){\n  \n  par(pch=1)\n  plot(x=close.to.init.1[,1],y=close.to.init.1[,2],col=\"red\",\n       xlim=c(min(close.to.init.1[,1],close.to.init.2[,1]),max(close.to.init.1[,1],close.to.init.2[,1]))\n       ,ylim=c(min(close.to.init.1[,2],close.to.init.2[,2]),max(close.to.init.1[,2],close.to.init.2[,2])))\n  \n  par(pch=3)\n  points(x=close.to.init.2[,1],y=close.to.init.2[,2],col=\"blue\")\n  title(paste(\"Final config Close to true config- w=\",w,collapse=\"\"))\n  legend(\"topright\",legend=c(expression(X[6]),expression(X[7])),col=c(\"red\",\"blue\"),pch=c(1,3))\n  \n  dev.print(paste(results.dir,\"/\",\"true-min-w\",w,\".png\",collapse=\"\",sep=\"\"),device=png,width=600,height=600)\n  fname<-paste(results.dir,\"/\",\"true-min-w\",w,\".pdf\",collapse=\"\",sep=\"\")\n  dev.copy2pdf(file=fname)\n  dev.off()\n  \n  #select.x<- sort( sample.int(x.grid.len , 10))\n  select.x<-1:x.grid.len \n  #select.y <- sort( sample.int(y.grid.len , 10))\n  select.y<-1:y.grid.len \n  #The indexing (select.x,select.y) is mixed because mesh.grid function generates a matrix \n  #whose columns are for x coordinates, while for final.coords, rows are for x coordinates\n  \n  #}\n  \n  if(!is.vector(far.to.init.1)){\n    #if (run.in.linux) {X11()} else {windows()}\n    par(pch=1)\n    plot(x=far.to.init.1[,1],y=far.to.init.1[,2],col=\"red\",\n         xlim=c(min(grid.seq.x),max(grid.seq.x))\n         ,ylim=c(min(grid.seq.y),max(grid.seq.y)))\n    par(pch=3)\n    points(x=far.to.init.2[,1],y=far.to.init.2[,2],col=\"blue\")\n    title(paste(\"Final config Far to true config- w=\",w,collapse=\"\"))\n    legend(\"topright\",legend=c(expression(X[6]),expression(X[7])),col=c(\"red\",\"blue\"),pch=c(1,3))\n    \n    dev.print(paste(results.dir,\"/\",\"other-min-w\",w,\".png\",collapse=\"\",sep=\"\"),device=png, width=600,height=600)\n    fname<-paste(results.dir,\"/\",\"other-min-w\",w,\".pdf\",collapse=\"\",sep=\"\")\n    dev.copy2pdf(file=fname)\n    \n  }\n  \n  print(\"Number of final config close to initial config\")\n  print(dim(close.to.init.1)[1])\n  final.close.to.init.w[w.i] <- dim(close.to.init.1)[1]\n  \n  print(\"Number of final config far to initial config\")\n  print(dim(far.to.init.1)[1])\n  min.config.stress.1.w[w.i]<- min.stress.1\n  min.config.stress.2.w[w.i]<- min.stress.2\n  \n  if (plot.in.3d){\n    \n    #if (!w%in%w.vals.sp) rgl.close()\n    \n  }\n  \n  if (nrow(far.to.init.1)==0) { far.to.init.1<-NULL}\n  if (nrow(far.to.init.2)==0) { far.to.init.2<-NULL}\n  if (nrow(close.to.init.1)==0) { close.to.init.1<-NULL}\n  if (nrow(close.to.init.2)==0) { close.to.init.2<-NULL}\n  \n  far.to.init.X5.for.w<- c(far.to.init.X5.for.w, list(far.to.init.1)) \n  far.to.init.X6.for.w<- c(far.to.init.X6.for.w, list(far.to.init.2))\n  close.to.init.X5.for.w <- c(close.to.init.X5.for.w, list(close.to.init.1))\n  close.to.init.X6.for.w <- c(close.to.init.X6.for.w, list(close.to.init.2)) \n  print(\"length(far.to.init.X5.for.w)\")\n  print(length(far.to.init.X5.for.w))\n  \n  \n  \n}\n\n\nmin.config.stress.w.table<-rbind(min.config.stress.1.w,min.config.stress.2.w)\n\ncolnames(min.config.stress.w.table) <- w.vals\nrow.names(min.config.stress.w.table) <- c(\"Local min for real config.\",\"Alternative local min\")\n#if (plot.in.3d){ rgl.close()}\n#graphics.off()\n\n\n\nif (create.ani){\n  saveGIF(animate.config.w(),\"config_w.gif\")\n  saveGIF(animate.final.loc.stress.w(),\"final_loc_vals_w.gif\")\n  saveMovie(animate.final.loc.stress.w(),movie.name=\"final_loc_vals_w.mov\")\n  #saveVideo(animate.final.loc.stress.w(),movie.name=\"final_loc_vals_w.avi\")\n  \n  open3d(windowRect=c(0,0,480,480))\n  play3d(stress.plot3d,duration=65,dev = rgl.cur(),sign.hessian.at.pt=sign.hessian.at.pt,\n         x.coords=x.coords,y.coords=y.coords,\n         stress.at.loc=stress.at.loc.w,\n         grid.seq.x=grid.seq.x,grid.seq.y=grid.seq.y,w.vals=w.vals,rotate.z.angle=pi/3)\n  \n  movie3d(stress.plot3d,duration=65,dev = rgl.cur(),fps=fps,sign.hessian.at.pt=sign.hessian.at.pt,\n          x.coords=x.coords,y.coords=y.coords,\n          stress.at.loc=stress.at.loc.w,\n          grid.seq.x=grid.seq.x,grid.seq.y=grid.seq.y,w.vals=w.vals, rotate.z.angle=pi/3,\n          dir=file.path(getwd(),\"./cache/\"),type=\"mov\")\n  \n}\n\n@\n\n\\begin{figure}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{true-min-w-0_1.pdf}\n\n\\label{fig:Finalconfig-MultMin-w-0_1_a}\n\\end{minipage}\n\\hspace{0.5cm}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{other-min-w-0_1.pdf}\n\n\\label{fig:Finalconfig-MultMin-w-0_1_b}\n\\end{minipage}\n\n\\caption{Final configurations for different initial configurations, $w=0.1$ }\n\\label{fig:Finalconfig-MultMin-w-0_1}\n\n\n\\end{figure}\n\n\n\n\n\\begin{figure}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{true-min-w0_5}\n\n\\label{fig:Finalconfig-MultMin-w-0_5_a}\n\n\\end{minipage}\n\\hspace{0.5cm}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{other-min-w0_5.pdf}\n\n\\label{fig:Finalconfig-MultMin-w-0_5_b}\n\n\\end{minipage}\n\n\\caption{Final configurations for different initial configurations, $w=0.5$ }\n\\label{fig:Finalconfig-MultMin-w-0_5}\n\n\\end{figure}\n\n\\begin{figure}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{true-min-w0_8.pdf}\n\\label{fig:Finalconfig-MultMin-w-0_8_a}\n\n\n\\end{minipage}\n\\hspace{0.5cm}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{other-min-w0_8.pdf}\n\\label{fig:Finalconfig-MultMin-w-0_8_b}\n\n\n\\end{minipage}\n\n\\caption{Final configurations for different initial configurations, $w=0.8$ }\n\\label{fig:Finalconfig-MultMin-w-0_8}\n\n\\end{figure}\n\n\n\n\\begin{figure}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{true-min-w0_81.pdf}\n\n\n\\end{minipage}\n\\hspace{0.5cm}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{other-min-w0_81.pdf}\n\n\n\\end{minipage}\n\n\\caption{Final configurations for different initial configurations, $w=0.81$ }\n\\label{fig:Finalconfig-MultMin-w-0_81}\n\n\\end{figure}\n\n\n\n\n\\begin{figure}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{true-min-w0_84.pdf}\n\n\\label{fig:figure2-1}\n\\end{minipage}\n\\hspace{0.5cm}\n\\begin{minipage}[b]{0.46\\linewidth}\n\\centering\n\\includegraphics[scale=0.41]{other-min-w0_84.pdf}\n\n\n\\end{minipage}\n\n\\caption{Final configurations for different initial configurations, $w=0.84$ }\n\\label{fig:Finalconfig-MultMin-w-0_84}\n\n\\end{figure}\n\n\n\n% latex table generated in R 2.15.1 by xtable 1.7-0 package\n% Sat Jan 05 00:54:38 2013\n\n\\begin{landscape}\n\\begin{table}[ht]\n\\def\\h#1{\\multicolumn{1}{p{3em}}{\\mbox{}\\hskip0pt #1}}\n\\begin{center}\n\n\\begin{tabular}{r|rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\hline\n$w$ & 0.1 & 0.2 & 0.3 & 0.4 & 0.41 & 0.42 & 0.43 & 0.44 & 0.45 & 0.46 & 0.47  \\\\ \n\\hline\nLocal min for real config. & 2.80 & 2.51 & 2.22 & 1.92 & 1.89 & 1.86 & 1.83 & 1.80 & 1.77 & 1.74 & 1.71 \\\\ \nAlternative local min & 0.39 & 0.76 & 1.10 & 1.40 & 1.43 & 1.46 & 1.48 & 1.51 & 1.53 & 1.56 & 1.58 \\\\ \n\\hline\n\\end{tabular}\n\n\n\\begin{tabular}{r|rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\hline\n$w$ & 0.48 & 0.49 & 0.5 & 0.51 & 0.52 & 0.53 & 0.54 & 0.55 & 0.6 & 0.65 & 0.7 \\\\ \n\\hline\nLocal min for real config. &  1.68 & 1.65 & 1.62 & 1.59 & 1.56 & 1.53 & 1.50 & 1.47 & 1.32 & 1.17 & 1.01   \\\\ \nAlternative local min &  1.60 & 1.63 & 1.65 & 1.67 & 1.69 & 1.71 & 1.73 & 1.74 & 1.81 & 1.82 & 1.81  \\\\ \n\\hline\n\\end{tabular}\n\n\n\n\\begin{tabular}{r|rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}\n\\hline\n$w$ & 0.75 & 0.76 & 0.77 & 0.78 & 0.79 & 0.8 & 0.81 & 0.82 & 0.83 & 0.84 & 0.85  \\\\ \n\\hline\nLocal min for real config. &  0.86 & 0.82 & 0.79 & 0.76 & 0.73 & 0.70 & 0.66 & 0.63 & 0.60 & 0.57 & 0.53  \\\\ \nAlternative local min &   1.79 & 1.77 & 1.75 & 1.72 & 1.69 & 1.66 & 1.64 & NA & NA & NA & NA \\\\ \n\\hline\n\\end{tabular}\n\n\\end{center}\n\n\\caption{Final stress values for the two local minima configurations\\label{table:stress_val}}\n\\end{table}\n\n\\end{landscape}\n\n\n\n\n\n\\begin{comment}\n%old results\n\n\\begin{table}[ht]\n\\begin{center}\n\\begin{tabular}{rrrrrr}\n\\hline\n$w$ value & 0.1 & 0.45 & 0.5 & 0.55 & 0.99 \\\\ \n\\hline\nLocal min for real config. & 2.80 & 1.77 & 1.62 & 1.47 & 0.04 \\\\ \nAlternative local min & 0.39 & 1.53 & 1.65 & 1.74 & NA \\\\ \n\\hline\n\\end{tabular}\n\\end{center}\n\\label{table:stress_val}\n\\end{table}\n\\end{comment}\n\n<<final_stress_plot,echo=FALSE,warning=FALSE,out.width='\\\\maxwidth',fig.cap='Final stress values vs $w$ for the two true and alternative local minima configurations'>>=\nw.cache <- c(\n  0.1, 0.2, 0.3, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47\n , 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.6, 0.65, 0.7 \n , 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85    \n  )\n  min.config.stress.1.w.cache <-  c(\n    2.80, 2.51, 2.22, 1.92, 1.89, 1.86, 1.83, 1.80, 1.77, 1.74, 1.71,  \n    1.68, 1.65, 1.62, 1.59, 1.56, 1.53, 1.50, 1.47, 1.32, 1.17, 1.01,\n    0.86, 0.82, 0.79, 0.76, 0.73, 0.70, 0.66, 0.63, 0.60, 0.57, 0.53  \n  )\nmin.config.stress.2.w.cache <- c(\n  0.39, 0.76, 1.10, 1.40, 1.43, 1.46, 1.48, 1.51, 1.53, 1.56, 1.58, \n  1.60, 1.63, 1.65, 1.67, 1.69, 1.71, 1.73, 1.74, 1.81, 1.82, 1.81,  \n  1.79, 1.77, 1.75, 1.72, 1.69, 1.66, 1.64, NA, NA, NA, NA \n  \n)\n\nw.len.c<- length(w.cache)\nstress.df<-data.frame (w.ind= 1:w.len.c, true.conf=min.config.stress.1.w.cache,alt.conf=min.config.stress.2.w.cache)\ng2 <- ggplot(data=stress.df,aes(w.ind)) + geom_line(aes(y=true.conf,color=\"True Config\"))+\n  geom_line(aes(y=alt.conf,color=\"Alternative Config\"))+\n  scale_x_discrete(\"w\",labels=w.cache)  + scale_y_continuous(\"Final Stress Value\") +\n  theme(text = element_text(size=13),\n        axis.text.x = element_text(angle=90,hjust=0.5,vjust=0.5),\n           legend.title = element_blank(), #element_text(\"Config Type\")\n           legend.position=\"bottom\") \nprint(g2)\n@\n\n",
    "created" : 1421550963563.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "505881069",
    "id" : "C9932930",
    "lastKnownWriteTime" : 1421552820,
    "path" : "/media/DocDrive_mSATA/Sancar/Documents/projects/thesis_template/chapter8_MDS_multmin.Rnw",
    "project_path" : "chapter8_MDS_multmin.Rnw",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "sweave"
}